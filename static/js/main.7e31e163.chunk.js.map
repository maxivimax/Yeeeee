{"version":3,"sources":["Yeee/Item.js","context.js","Yeee/List.js","App.js","serviceWorker.js","index.js"],"names":["styles","React","createContext","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","Item","_ref","todo","index","onChange","react_default","a","createElement","style","className","join","type","checked","completed","id","name","phone","ul","listStyle","margin","List","b","g","props","todos","map","Yeee_Item","key","onToggle","position2","sendPOST","mapCont","height","butt","width","title","marginLeft","hrr","backgroundColor","marg","marginTop","App","_React$useState","useState","_React$useState2","Object","slicedToArray","jsonn","setID","_React$useState3","_React$useState4","loading","useEffect","fetch","then","response","json","data","setTimeout","length","Yeee_List","Number","address","geo","lat","lng","push","splice","console","log","indexOf","onClick","zip","some","person","zipcodeS","method","body","zipcode","headers","Authorization","Content-Type","catch","error","alert","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e31e163.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Context from '../context'\nlet g\nlet bodyy \n\nconst styles = {\n  li: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '.5rem 1rem',\n    border: '1px solid #ccc',\n    borderRadius: '4px',\n    marginBottom: '.5rem'\n  },\n  input: {\n    marginRight: '1rem'\n  }\n}\n\nfunction fetch1h(id, zipcode){\n  bodyy = \"[{'id': \" + id + \" 'zipcode': \" + zipcode + \"}]\"\n    g = fetch('https://httpbin.org/post',{\n     method: 'POST',\n     body: {\n      'id': id,\n      'zipcode': 'application/json'\n    },\n     headers: {\n     'Authorization': 'very_secret_token',\n     'Content-Type': 'application/json'\n    }\n   })\n    .catch(error => {\n    alert(error); // Error: Not Found\n  });\n     console.log(g);\n\n     \n}\n\nfunction Item({ todo, index, onChange }) {\n  const classes = []\n\n  return (\n    <li style={styles.li}>\n      <span className={classes.join(' ')}>  \n        <input\n          type='checkbox'\n          checked={todo.completed}\n          style={styles.input}\n          onChange={() => onChange(todo.id)}\n        />\n        | \n        <strong>{index + 1}</strong> |\n        &nbsp;\n        {todo.name}\n          |  \n        {todo.phone} \n      </span>\n\n    </li>\n  )\n}\n\nItem.propTypes = {\n  todo: PropTypes.object.isRequired,\n  index: PropTypes.number,\n  onChange: PropTypes.func.isRequired\n}\n\nexport default Item\n","import React from 'react'\n\nconst Context = React.createContext()\n\nexport default Context\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Item from './Item'\n\nconst styles = {\n  ul: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0\n  }\n}\n\nfunction List(props) {\n  return (\n    <ul style={styles.ul}>\n      {props.todos.map((todo, index) => {\n        return (\n          <Item\n            todo={todo}\n            key={todo.id}\n            index={index}\n            onChange={props.onToggle}\n          />\n        )\n      })}\n    </ul>\n  )\n}\n\nList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggle: PropTypes.func.isRequired\n}\n\nexport default List\n","import React, { useEffect } from 'react'\nimport List from './Yeee/List'\nimport { MapContainer, TileLayer, Marker, Popup, LayersControl, Circle, LayerGroup, FeatureGroup, Rectangle } from 'react-leaflet'\n\nlet a\nlet b\nlet g\n\nconst position2 = [50,30];      \n\n\n\nvar removeByAttr = function(arr, attr, value){\n    var i = arr.length;\n    while(i--){\n       if( arr[i] \n           && arr[i].hasOwnProperty(attr) \n           && (arguments.length > 2 && arr[i][attr] === value ) ){ \n\n           arr.splice(i,1);\n\n       }\n    }\n    return arr;\n}\n\nlet sendPOST = [];\n\nconst styles = {\n  mapCont: {\n    height: '70vh'\n  },\n  butt: {\n    width:'600px',\n    height: '20vh'\n  },\n  title: {\n    marginLeft: '3vh'\n  },\n  hrr: {\n    height: '2px',\n    backgroundColor: 'black',\n    width: '97vw'\n  },\n  marg: {\n    marginTop: '5vw',\n    marginBottom: '3vw'\n  } \n}\n\nfunction App() {\n  const [jsonn, setID] = React.useState([])\n  const [loading, setLoading] = React.useState(true)\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => {\n        setTimeout(() => {\n          setID(data)\n        }, 2000)\n      })\n  }, [])\n\n\n\nfunction AddCard(lat, lng) {\n    console.log(lat)\n    console.log(lng)\n  }\n\nfunction toggle(id) {\n    setID(\n      jsonn.map(jsonn => {\n        if (jsonn.id === id) {\n          a = Number(jsonn.address.geo.lat);\n          b = Number(jsonn.address.geo.lng);\n\n          jsonn.completed = !jsonn.completed\n          if(jsonn.completed == true){\n            sendPOST.push(id);\n\n            position2.splice(0,2);\n            position2.push(a);\n            position2.push(b);\n\n            console.log(position2);\n            console.log(sendPOST);\n            }\n          if(jsonn.completed == false){\n            position2.splice(0,2);\n            const index = sendPOST.indexOf(id);\n            if (index > -1) {\n              sendPOST.splice(index, 1);\n            }\n            console.log(sendPOST);\n          }\n        }\n        return jsonn\n      })\n    )\n  }\n\nfunction fetch1h(id, zip){\n          g = fetch('https://httpbin.org/post',{\n             method: 'POST',\n             body: {\n              'id': id,\n              'zipcode': zip\n            },\n             headers: {\n             'Authorization': 'very_secret_token',\n             'Content-Type': 'application/json'\n            }\n           })\n            .catch(error => {\n            alert(error); // Error warning\n          });\n             console.log(g)\n}\n\nfunction sendPST(){\n    setID(\n      jsonn.map(jsonn => {\n        if(sendPOST.some(function(person){if(person === jsonn.id){return true} }) === true){\n          fetch1h(jsonn.id, jsonn.address.zipcodeS);\n        }\n        return jsonn\n      })\n    )  \n}\n\n  return (\n    <div>\n      <h1 style={styles.title}>Тест по ReactJS</h1>\n      <div className='wrapper'>\n        {jsonn.length ? (\n          <List todos={jsonn} onToggle={ toggle } />\n        ) : loading ? null : (\n          <p>JSON in down.....</p>\n        )}\n        <button style={styles.butt} onClick={sendPST}>\n          Нуууу... Это кнопка для отправки POST запроса серверу.😊\n        </button>\n      </div>\n      <br />\n      <hr style={styles.hrr} />\n      <div style={styles.marg}>\n        <h1 style={styles.title}>Карта(React Leaflet и Openstreetmap)</h1>\n        <MapContainer style={styles.mapCont} center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors  |  <a href=\"http://vk.com/maxivimax\">Maxivimax</a>'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Marker position={position2} />\n        </MapContainer>\n      </div>\n    </div>\n\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}